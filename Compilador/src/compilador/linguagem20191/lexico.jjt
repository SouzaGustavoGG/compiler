options{
    STATIC = false;
}

PARSER_BEGIN(Parser)
package compilador.linguagem20191;
import compilador.AnaliseSemantica.AcoesSemanticas;

public class Parser{

    public Parser() {

    }

    public void executarAnalise() throws ParseException{
        Token token = getNextToken();

        while(token.kind != 0){
            token = getNextToken();
        }
    }
    
    public void executarAnaliseSintatica() throws ParseException{
        System.out.println("Analisador sintatico");
    	Programa();
    }
}
PARSER_END(Parser)

// INICIO SINTATICO

void Programa() : {} {
    Comentario()<PROGRAM><OPEN_KEY>DeclaracaoConstVar()CorpoPrograma()<CLOSE_KEY>IdentificadorPrograma()
}

void Comentario(): {} {
    <LITERAL_CONST_SINGLE_QUOTES>|<LITERAL_CONST_SINGLE_QUOTES> | {}
}

void IdentificadorPrograma(): {} {
    <IDENTIFIER> | {}
}

void DeclaracaoConstVar(): {} {
    <DEFINE><OPEN_KEY>ConstantesVariaveis()<CLOSE_KEY> | {}
}

void ConstantesVariaveis(): {} {
    DeclaracaoConst()Variaveis2()|DeclaracaoVar()Constantes2()
}

void DeclaracaoConst(): {} {
    <NOT><VARIABLE>Constantes()
}

void Constantes(): {} {
    Tipo()<IS>ListaIdentConst()Valor()<DOT>Constantes1()
}

void Constantes1(): {} {
    Constantes() | {}
}

void Constantes2(): {} {
    DeclaracaoConst() | {}
}

void DeclaracaoVar(): {} {
    <VARIABLE>Variaveis()
}

void Variaveis(): {} {
    Tipo()<IS>ListaIdentVar()Valor()<DOT>Variaveis1()
}

void Variaveis1(): {} {
    Variaveis() | {}
}

void Variaveis2(): {} {
    DeclaracaoVar() | {}
}

void Tipo(): {} {
    <NATURAL> | <REAL> | <CHAR> | <BOOLEAN>
}

void ListaIdentConst(): {} {
    <IDENTIFIER>ListaIdentConst1()
}

void ListaIdentConst1(): {} {
    <COMMA>ListaIdentConst() | {}
}

void ListaIdentVar(): {} {
    <IDENTIFIER>Indice()ListaIdentVar1()
}

void ListaIdentVar1(): {} {
    <COMMA>ListaIdentVar() | {}
}

void Indice(): {} {
    <OPEN_KEY><NATURAL_NUMBER><CLOSE_KEY> | {}
}

void Valor(): {} {
    <LITERAL_CONST_DOUBLE_QUOTES> | <LITERAL_CONST_SINGLE_QUOTES> | <NATURAL_NUMBER> | <REAL_NUMBER>
}


// ------------------------------------------FIM DECLARACAO-------------------------------------------------

// INICIO LEXICO
//ignorar
SKIP : {
    "q "
	| "\t"
    | "\n"
    | "\r"
    | "\f"
}

SKIP : {
    ":--" {Dados.addError("COMENTARIO DE BLOCO NAO FINALIZADO", image.toString(), input_stream.getEndLine(),
               input_stream.getBeginColumn(), jjmatchedKind);}: multilinecomment
}

<multilinecomment> SKIP : {
	"--:" {Dados.removeLastError();}: DEFAULT
	| <~[]>
}

SKIP : {
    ":-": singlelinecomment
}

<singlelinecomment> SKIP : {
	<["\n", "\r"]> : DEFAULT
	| <~[]>
}

//palavras reservadas
TOKEN : {
	 < PROGRAM: ("program"|"PROGRAM")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < DEFINE: ("define"|"DEFINE")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < NOT: ("not"|"NOT")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < VARIABLE: ("variable"|"VARIABLE")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < IS: ("is"|"IS")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < NATURAL: ("natural"|"NATURAL")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < REAL: ("real"|"REAL")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < CHAR: ("char"|"CHAR")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < BOOLEAN: ("boolean"|"BOOLEAN")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < EXECUTE: ("execute"|"EXECUTE")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < SET: ("set"|"SET")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < TO: ("to"|"TO")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < GET: ("get"|"GET")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < PUT: ("put"|"PUT")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < LOOP: ("loop"|"LOOP")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < WHILE: ("while"|"WHILE")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < TRUE: ("true"|"TRUE")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < FALSE: ("false"|"FALSE")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < DO: ("do"|"DO")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < VERIFY: ("verify"|"VERIFY")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
}

//constante literal
TOKEN: {
   <LITERAL_CONST_DOUBLE_QUOTES: "\"" (~[ "\"", "\n", "\r"])* "\"">{Dados.addDado("CONSTANTE LITERAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
   | <LITERAL_CONST_SINGLE_QUOTES: "\'" (~[ "\"", "\n", "\r"])* "\'">{Dados.addDado("CONSTANTE LITERAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}

}

//caracteres especiais
TOKEN : {
	< OPEN_KEY: "{" >{Dados.addDado("SIMBOLO ESPECIAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	//| < UNDER: "_"> {Dados.addDado("SIMBOLO ESPECIAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < CLOSE_KEY: "}" >{Dados.addDado("SIMBOLO ESPECIAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < DOT: "." >{Dados.addDado("SIMBOLO ESPECIAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < COMMA: "," >{Dados.addDado("SIMBOLO ESPECIAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < PLUS: "+" >{Dados.addDado("OPERADOR ARITMETICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < MINUS: "-" >{Dados.addDado("OPERADOR ARITMETICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < MULTIPLY: "*" >{Dados.addDado("OPERADOR ARITMETICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < DIVIDER: "/" >{Dados.addDado("OPERADOR ARITMETICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < PERCENT: "%" >{Dados.addDado("OPERADOR ARITMETICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < MOD: "%%" >{Dados.addDado("OPERADOR ARITMETICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < POW: "**" >{Dados.addDado("OPERADOR ARITMETICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < EQUALS: "==" >{Dados.addDado("OPERADOR RELACIONAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < EXCLAMATION: "!" >{Dados.addDado("OPERADOR LOGICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < LESS: "<" >{Dados.addDado("OPERADOR RELACIONAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < LESS_EQUAL: "<=" >{Dados.addDado("OPERADOR RELACIONAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < GREATER: ">" >{Dados.addDado("OPERADOR RELACIONAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < GREATER_EQUAL: ">=" >{Dados.addDado("OPERADOR RELACIONAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
    | < DIFFERENT: "!=" >{Dados.addDado("OPERADOR RELACIONAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < AMPERSAND: "&" >{Dados.addDado("OPERADOR LOGICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < PIPE: "|" >{Dados.addDado("OPERADOR LOGICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < OPEN_PARENTHESIS: "(" >{Dados.addDado("SIMBOLO ESPECIAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < CLOSE_PARENTHESIS: ")" >{Dados.addDado("SIMBOLO ESPECIAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
}

// numbers
TOKEN : {
	< #DIGIT: ["0"-"9"] >
	| < #NOT_DIGIT: (~["0"-"9", " ", "+", "-", "*", "/", "<", ">", "%", "=", "&", "|"])+ >
	| < #DECIMAL_NUMBER: <DOT><DIGIT>(<DIGIT>)?>
	| < NATURAL_NUMBER: <DIGIT>(<DIGIT>)?(<DIGIT>)? >{Dados.addDado("NUMERO NATURAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < REAL_NUMBER: <DIGIT>((<DIGIT>)?){4}<DECIMAL_NUMBER> >{Dados.addDado("NUMERO REAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
}

// identificador
TOKEN : {
     < LETTER:["A"-"Z", "a"-"z"]> {Dados.addDado("IDENTIFICADOR", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
    | < UNDER: "_"> {Dados.addDado("IDENTIFICADOR", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
    |< IDENTIFIER:
((<LETTER>)+((<UNDER>|(<DIGIT>((<LETTER>)+|<UNDER>))+) | (<UNDER>((<DIGIT>((<LETTER>)+|<UNDER>))+|(<LETTER>)+))+)?)+ 
    | (<UNDER>((<DIGIT>((<LETTER>)+|<UNDER>))+|  ((<LETTER>)+((<UNDER>|(<DIGIT>((<LETTER>)+|<UNDER>))+) | (<UNDER>((<DIGIT>((<LETTER>)+|<UNDER>))+|(<LETTER>)+))+)?)+)+) 
    |<UNDER>
    |<LETTER>
    > 
{Dados.addDado("IDENTIFICADOR", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
}

// erros
SPECIAL_TOKEN : {
    <INVALID_SYMBOLS: (~["a"-"z", "A"-"Z", "0"-"9", "\"", "(", ")", "{", "}", ",", ".", "=", ">", "<", "!",
    "+", "-", "_", "*", "&", "/", "%", "|", "\n", "\r", "\f", "\t", " "])+>{Dados.addError("SIMBOLO INVALIDO", image.toString(), input_stream.getEndLine(),
     input_stream.getBeginColumn(), jjmatchedKind);}
    //| <INVALID_NATURAL_NUMBER: <DIGIT>(<DIGIT>)?(<DIGIT>)?<NOT_DIGIT>>{Dados.addError("NUMERO NATURAL INVALIDO", image.toString(), input_stream.getEndLine(),
    //   input_stream.getBeginColumn(), jjmatchedKind);}
    | <INVALID_REAL_NUMBER: (<DIGIT>)+<DOT>(<DIGIT>)*>{Dados.addError("NUMERO REAL INVALIDO", image.toString(), input_stream.getEndLine(),
      input_stream.getBeginColumn(), jjmatchedKind);}
    | <INVALID_LITERAL_CONST_DOUBLE: "\"" (~["\n","\r","\""])* ~["\""]>{Dados.addError("CONSTANTE LITERAL INVALIDA", image.toString(), input_stream.getEndLine(),
                                    input_stream.getBeginColumn(), jjmatchedKind);}

    | <INVALID_LITERAL_CONST_SINGLE: "\'" (~["\n","\r","\""])* ~["\'"]>{Dados.addError("CONSTANTE LITERAL INVALIDA", image.toString(), input_stream.getEndLine(),
                                          input_stream.getBeginColumn(), jjmatchedKind);}
    | <INVALID_IDENTIFIER: //(<LETTER>|<DIGIT>|<UNDER>)*(<UNDER>){2}(<LETTER>|<DIGIT>|<UNDER>)*
     (<LETTER>|<UNDER>)+(<LETTER>|<DIGIT>|<UNDER>)*(<UNDER>){2}(<LETTER>|<DIGIT>|<UNDER>)*
    |(<UNDER>){2}(<LETTER>|<DIGIT>|<UNDER>)*//__ __a122 __aaaa
    | (<LETTER>|<UNDER>)+(<LETTER>|<DIGIT>|<UNDER>)*(<DIGIT>){2}(<LETTER>|<DIGIT>|<UNDER>)*
    | (<LETTER>|<UNDER>)+(<LETTER>|<DIGIT>|<UNDER>)*<DIGIT>> {Dados.addError("IDENTIFICADOR INVALIDO", image.toString(), input_stream.getEndLine(),
                                                                                                      input_stream.getBeginColumn(), jjmatchedKind);}
}