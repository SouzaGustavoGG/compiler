/* Generated By:JavaCC: Do not edit this line. Parser.java */
package compilador.linguagem20191;
import compilador.AnaliseSemantica.*;

public class Parser implements ParserConstants {

    private static TabelaSimbolos ts = null;
    private static EstruturaControle ec = null;
    public static ArrayList<String> codigo = null;

    public Parser() {

    }

    public void executarAnalise() throws ParseException{
        Token token = getNextToken();

        while(token.kind != 0){
            token = getNextToken();
        }
    }

    public void executarAnaliseSintatica() throws ParseException{
        System.out.println("Analisador sintatico");
        Programa();
    }

// INICIO SINTATICO
  final public void Programa() throws ParseException, ErroSemantico {
     Token t_nomePrograma;
     ts = new TabelaSimbolos();
     ec = new EstruturaControle();
     codigo = new ArrayList<String>();
    Comentario();
    jj_consume_token(PROGRAM);
    jj_consume_token(OPEN_KEY);
    DeclaracaoConstVar();
    CorpoPrograma();
    jj_consume_token(CLOSE_KEY);
    IdentificadorPrograma();
  }

  final public void Comentario() throws ParseException, ErroSemantico {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LITERAL_CONST_SINGLE_QUOTES:
      jj_consume_token(LITERAL_CONST_SINGLE_QUOTES);
      break;
      jj_consume_token(LITERAL_CONST_SINGLE_QUOTES);
      break;
    default:
      jj_la1[0] = jj_gen;

    }
  }

  final public void IdentificadorPrograma() throws ParseException, ErroSemantico {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[1] = jj_gen;

    }
  }

  final public void DeclaracaoConstVar() throws ParseException, ErroSemantico {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFINE:
      jj_consume_token(DEFINE);
      jj_consume_token(OPEN_KEY);
      ConstantesVariaveis();
      jj_consume_token(CLOSE_KEY);
      break;
    default:
      jj_la1[2] = jj_gen;

    }
  }

  final public void ConstantesVariaveis() throws ParseException, ErroSemantico {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      DeclaracaoConst();
      Variaveis2();
      break;
    case VARIABLE:
      DeclaracaoVar();
      Constantes2();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DeclaracaoConst() throws ParseException, ErroSemantico {
    jj_consume_token(NOT);
    jj_consume_token(VARIABLE);
    Constantes();
  }

  final public void Constantes() throws ParseException, ErroSemantico {
    Tipo();
    jj_consume_token(IS);
    ListaIdentConst();
    Valor();
    jj_consume_token(DOT);
    Constantes1();
  }

  final public void Constantes1() throws ParseException, ErroSemantico {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NATURAL:
    case REAL:
    case CHAR:
    case BOOLEAN:
      Constantes();
      break;
    default:
      jj_la1[4] = jj_gen;

    }
  }

  final public void Constantes2() throws ParseException, ErroSemantico {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      DeclaracaoConst();
      break;
    default:
      jj_la1[5] = jj_gen;

    }
  }

  final public void DeclaracaoVar() throws ParseException, ErroSemantico {
    jj_consume_token(VARIABLE);
    Variaveis();
  }

  final public void Variaveis() throws ParseException, ErroSemantico {
    Tipo();
    jj_consume_token(IS);
    ListaIdentVar();
    Valor();
    jj_consume_token(DOT);
    Variaveis1();
  }

  final public void Variaveis1() throws ParseException, ErroSemantico {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NATURAL:
    case REAL:
    case CHAR:
    case BOOLEAN:
      Variaveis();
      break;
    default:
      jj_la1[6] = jj_gen;

    }
  }

  final public void Variaveis2() throws ParseException, ErroSemantico {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      DeclaracaoVar();
      break;
    default:
      jj_la1[7] = jj_gen;

    }
  }

  final public void Tipo() throws ParseException, ErroSemantico {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NATURAL:
      jj_consume_token(NATURAL);
      break;
    case REAL:
      jj_consume_token(REAL);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ListaIdentConst() throws ParseException, ErroSemantico {
    jj_consume_token(IDENTIFIER);
    ListaIdentConst1();
  }

  final public void ListaIdentConst1() throws ParseException, ErroSemantico {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      ListaIdentConst();
      break;
    default:
      jj_la1[9] = jj_gen;

    }
  }

  final public void ListaIdentVar() throws ParseException, ErroSemantico {
    jj_consume_token(IDENTIFIER);
    Indice();
    ListaIdentVar1();
  }

  final public void ListaIdentVar1() throws ParseException, ErroSemantico {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      ListaIdentVar();
      break;
    default:
      jj_la1[10] = jj_gen;

    }
  }

  final public void Indice() throws ParseException, ErroSemantico {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN_KEY:
      jj_consume_token(OPEN_KEY);
      jj_consume_token(NATURAL_NUMBER);
      jj_consume_token(CLOSE_KEY);
      break;
    default:
      jj_la1[11] = jj_gen;

    }
  }

  final public void Valor() throws ParseException, ErroSemantico {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LITERAL_CONST_DOUBLE_QUOTES:
      jj_consume_token(LITERAL_CONST_DOUBLE_QUOTES);
      break;
    case LITERAL_CONST_SINGLE_QUOTES:
      jj_consume_token(LITERAL_CONST_SINGLE_QUOTES);
      break;
    case NATURAL_NUMBER:
      jj_consume_token(NATURAL_NUMBER);
      break;
    case REAL_NUMBER:
      jj_consume_token(REAL_NUMBER);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CorpoPrograma() throws ParseException, ErroSemantico {

  }

  final public void ListaComandos() throws ParseException, ErroSemantico {

  }

  final public void Item() throws ParseException, ErroSemantico {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
                      AcoesSemanticas.identificadorComandoSaida_18(ec, ts, codigo, t.image);
      Indice();
                                                                                                      AcoesSemanticas.variavelArrayComandoDeSaida_19(ec, ts, codigo);
      break;
    case NATURAL_NUMBER:
      jj_consume_token(NATURAL_NUMBER);
                           AcoesSemanticas.constanteInteiraComandoSaida_20(ec,codigo,valor.image);
      break;
    case REAL_NUMBER:
      jj_consume_token(REAL_NUMBER);
                        AcoesSemanticas.constanteRealComandoSaida_21(ec,codigo,valor.image);
      break;
    case LITERAL_CONST_DOUBLE_QUOTES:
    case LITERAL_CONST_SINGLE_QUOTES:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LITERAL_CONST_DOUBLE_QUOTES:
        jj_consume_token(LITERAL_CONST_DOUBLE_QUOTES);
        break;
      case LITERAL_CONST_SINGLE_QUOTES:
        jj_consume_token(LITERAL_CONST_SINGLE_QUOTES);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                          AcoesSemanticas.constanteLiteralComandoSaida_22(ec,codigo,valor.image);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Selecao() throws ParseException, ErroSemantico {
    jj_consume_token(VERIFY);
    Expressao();
    jj_consume_token(IS);
    Clausulas();
                                               AcoesSemanticas.fimComandoSelecao_23(ec,codigo);
  }

  final public void Clausulas() throws ParseException, ErroSemantico {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
                AcoesSemanticas.palavraReservadaTrue_24(ec,codigo,ts);
      jj_consume_token(OPEN_KEY);
      ListaComandos();
      jj_consume_token(CLOSE_KEY);
      Falsa();
      break;
    case FALSE:
      jj_consume_token(FALSE);
                  AcoesSemanticas.palavraReservadaUntrue_25(ec,codigo,ts);
      jj_consume_token(OPEN_KEY);
      ListaComandos();
      jj_consume_token(CLOSE_KEY);
      Verdadeira();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Verdadeira() throws ParseException, ErroSemantico {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IS:
      jj_consume_token(IS);
      jj_consume_token(TRUE);
                   AcoesSemanticas.palavraReservadaTrueOuUntrue_26(ec,codigo,ts);
      jj_consume_token(OPEN_KEY);
      ListaComandos();
      jj_consume_token(CLOSE_KEY);
      break;
    default:
      jj_la1[16] = jj_gen;

    }
  }

  final public void Falsa() throws ParseException, ErroSemantico {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IS:
      jj_consume_token(IS);
      jj_consume_token(FALSE);
                    AcoesSemanticas.palavraReservadaTrueOuUntrue_26(ec,codigo,ts);
      jj_consume_token(OPEN_KEY);
      ListaComandos();
      jj_consume_token(CLOSE_KEY);
      break;
    default:
      jj_la1[17] = jj_gen;

    }
  }

  final public void Repeticao() throws ParseException, ErroSemantico {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOOP:
      jj_consume_token(LOOP);
               AcoesSemanticas.comandoRepeticao_27(ec);
      jj_consume_token(OPEN_KEY);
      ListaComandos();
      jj_consume_token(CLOSE_KEY);
      jj_consume_token(WHILE);
      Expressao();
                                                                                                                  AcoesSemanticas.fimComandoRepeticao_28(ec,codigo);
      jj_consume_token(IS);
      jj_consume_token(TRUE);
      break;
    case WHILE:
      jj_consume_token(WHILE);
                 AcoesSemanticas.inicioComandoRepeticao_29(ec);
      Expressao();
                                                                              AcoesSemanticas.comandoRepeticao_30(ec,codigo);
      jj_consume_token(IS);
      jj_consume_token(TRUE);
      jj_consume_token(DO);
      jj_consume_token(OPEN_KEY);
      ListaComandos();
      jj_consume_token(CLOSE_KEY);
                                                                                                                                                                                        AcoesSemanticas.fimComandoRepeticao_31(ec,codigo);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Expressao() throws ParseException, ErroSemantico {
    ExpressaoAritmeticaOuLogica();
    Expressao1();
  }

  final public void Expressao1() throws ParseException, ErroSemantico {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      jj_consume_token(EQUALS);
      ExpressaoAritmeticaOuLogica();
                                               AcoesSemanticas.operacaoRelacionalIgual_32(ec, codigo);
      break;
    case DIFFERENT:
      jj_consume_token(DIFFERENT);
      ExpressaoAritmeticaOuLogica();
                                                   AcoesSemanticas.operacaoRelacionalDiferente_33(ec, codigo);
      break;
    case LESS:
      jj_consume_token(LESS);
      ExpressaoAritmeticaOuLogica();
                                              AcoesSemanticas.operacaoRelacionalMenor_34(ec, codigo);
      break;
    case GREATER:
      jj_consume_token(GREATER);
      ExpressaoAritmeticaOuLogica();
                                                 AcoesSemanticas.operacaoRelacionalMaior_35(ec, codigo);
      break;
    case LESS_EQUAL:
      jj_consume_token(LESS_EQUAL);
      ExpressaoAritmeticaOuLogica();
                                                    AcoesSemanticas.operacaoRelacionalMenorIgual_36(ec, codigo);
      break;
    case GREATER_EQUAL:
      jj_consume_token(GREATER_EQUAL);
      ExpressaoAritmeticaOuLogica();
                                                       AcoesSemanticas.operacaoRelacionalMaiorIgual_37(ec, codigo);
      break;
    default:
      jj_la1[19] = jj_gen;

    }
  }

  final public void ExpressaoAritmeticaOuLogica() throws ParseException, ErroSemantico {
    Termo2();
    MenorPrioridade();
  }

  final public void MenorPrioridade() throws ParseException, ErroSemantico {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      Termo2();
      MenorPrioridade();
                                           AcoesSemanticas.operacaoAritmeticaAdicao_38(ec,codigo);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      Termo2();
      MenorPrioridade();
                                             AcoesSemanticas.operacaoAritmeticaSubtracao_39(ec,codigo);
      break;
    case PIPE:
      jj_consume_token(PIPE);
      Termo2();
      MenorPrioridade();
                                            AcoesSemanticas.operacaoLogicaOU_40(ec,codigo);
      break;
    default:
      jj_la1[20] = jj_gen;

    }
  }

  final public void Termo2() throws ParseException, ErroSemantico {
    Termo1();
    MediaPrioridade();
  }

  final public void MediaPrioridade() throws ParseException, ErroSemantico {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
      Termo1();
      MediaPrioridade();
                                               AcoesSemanticas.operacaoAritmeticaMultiplicao_41(ec,codigo);
      break;
    case DIVIDER:
      jj_consume_token(DIVIDER);
      Termo1();
      MediaPrioridade();
                                               AcoesSemanticas.operacaoAritmeticaDivReal_42(ec,codigo);
      break;
    case PERCENT:
      jj_consume_token(PERCENT);
      Termo1();
      MediaPrioridade();
                                               AcoesSemanticas.operacaoAritmeticaDivInteira_43(ec,codigo);
      break;
    case MOD:
      jj_consume_token(MOD);
      Termo1();
      MediaPrioridade();
                                           AcoesSemanticas.operacaoAritmeticaRestoDivInteira_44(ec,codigo);
      break;
    case AMPERSAND:
      jj_consume_token(AMPERSAND);
      Termo1();
      MediaPrioridade();
                                                 AcoesSemanticas.operacaoLogicaE_45(ec, codigo);
      break;
    default:
      jj_la1[21] = jj_gen;

    }
  }

  final public void Termo1() throws ParseException, ErroSemantico {
    Elemento();
    MaiorPrioridade();
  }

  final public void MaiorPrioridade() throws ParseException, ErroSemantico {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POW:
      jj_consume_token(POW);
      Elemento();
      MaiorPrioridade();
                                            AcoesSemanticas.operacaoAritmeticaPotencia_46(ec,codigo);
      break;
    default:
      jj_la1[22] = jj_gen;

    }
  }

  final public void Elemento() throws ParseException, ErroSemantico {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
                       AcoesSemanticas.aidentificadorComandoSaida_18(ec, ts, codigo, t.image);
      Indice();
                                                                                                          AcoesSemanticas.variavelArrayComandoDeSaida_19(ec, ts, codigo);
      break;
    case NATURAL_NUMBER:
      jj_consume_token(NATURAL_NUMBER);
                            AcoesSemanticas.constanteInteiraComandoSaida_20(ec, codigo, valor.image);
      break;
    case REAL_NUMBER:
      jj_consume_token(REAL_NUMBER);
                         AcoesSemanticas.constanteRealComandoSaida_21(ec, codigo, valor.image);
      break;
    case LITERAL_CONST_DOUBLE_QUOTES:
    case LITERAL_CONST_SINGLE_QUOTES:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LITERAL_CONST_DOUBLE_QUOTES:
        jj_consume_token(LITERAL_CONST_DOUBLE_QUOTES);
        break;
      case LITERAL_CONST_SINGLE_QUOTES:
        jj_consume_token(LITERAL_CONST_SINGLE_QUOTES);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                           AcoesSemanticas.constanteLiteralComandoSaida_22(ec,codigo, valor.image);
      break;
    case TRUE:
      jj_consume_token(TRUE);
                  AcoesSemanticas.constanteLogicaTrue_47(ec,codigo);
      break;
    case FALSE:
      jj_consume_token(FALSE);
                   AcoesSemanticas.constanteLogicaUntrue_48(ec,codigo);
      break;
    case OPEN_PARENTHESIS:
      jj_consume_token(OPEN_PARENTHESIS);
      Expressao();
      jj_consume_token(CLOSE_PARENTHESIS);
      break;
    case EXCLAMATION:
      jj_consume_token(EXCLAMATION);
      jj_consume_token(OPEN_PARENTHESIS);
      Expressao();
      jj_consume_token(CLOSE_PARENTHESIS);
                                                                            AcoesSemanticas.operacaoLogicaNao_49(ec,codigo);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x2000,0xc000,0x1e0000,0x4000,0x1e0000,0x8000,0x1e0000,0x0,0x0,0x0,0x0,0x0,0x0,0x30000000,0x10000,0x10000,0xc000000,0x0,0x0,0x0,0x0,0x0,0x30000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x4,0x18000003,0x3,0x98000003,0x0,0x0,0x0,0x0,0xfa000,0x2000c0,0x100f00,0x1000,0x3,0x98404003,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[69];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 69; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
