/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package compilador.linguagem20191;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x240L) != 0L)
         {
            jjmatchedKind = 64;
            return 88;
         }
         if ((active0 & 0x4000000000000000L) != 0L)
            return 231;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0x8000000000000L);
      case 37:
         jjmatchedKind = 42;
         return jjMoveStringLiteralDfa1_0(0x80000000000L);
      case 38:
         return jjStopAtPos(0, 52);
      case 40:
         return jjStopAtPos(0, 54);
      case 41:
         return jjStopAtPos(0, 55);
      case 42:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 43:
         return jjStopAtPos(0, 38);
      case 44:
         return jjStopAtPos(0, 37);
      case 45:
         return jjStopAtPos(0, 39);
      case 46:
         return jjStopAtPos(0, 36);
      case 47:
         return jjStopAtPos(0, 41);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x240L);
      case 60:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_0(0x1000000000000L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x200000000000L);
      case 62:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x4000000000000L);
      case 95:
         return jjStartNfaWithStates_0(0, 62, 231);
      case 123:
         return jjStopAtPos(0, 34);
      case 124:
         return jjStopAtPos(0, 53);
      case 125:
         return jjStopAtPos(0, 35);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 37:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         break;
      case 42:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      case 45:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 61:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(2, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 247;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x8c000098ffffc9ffL & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAdd(88);
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(0, 4);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(5, 8);
                  if (curChar == 39)
                     jjCheckNAddStates(9, 12);
                  break;
               case 231:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 68)
                        kind = 68;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(245, 246);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 242;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(240, 241);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(235, 236);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(214, 218);
                  break;
               case 88:
                  if ((0x8c000098ffffc9ffL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(88);
                  break;
               case 175:
                  if (curChar == 34)
                     jjCheckNAddStates(5, 8);
                  break;
               case 176:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(176, 177);
                  break;
               case 177:
                  if (curChar == 34 && kind > 32)
                     kind = 32;
                  break;
               case 178:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(178, 179);
                  break;
               case 179:
                  if ((0xfffffffbffffffffL & l) != 0L && kind > 66)
                     kind = 66;
                  break;
               case 180:
                  if (curChar == 39)
                     jjCheckNAddStates(9, 12);
                  break;
               case 181:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(181, 182);
                  break;
               case 182:
                  if (curChar == 39 && kind > 33)
                     kind = 33;
                  break;
               case 183:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(183, 184);
                  break;
               case 184:
                  if ((0xffffff7fffffffffL & l) != 0L && kind > 67)
                     kind = 67;
                  break;
               case 185:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddStates(0, 4);
                  break;
               case 186:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 187:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 188:
                  if ((0x3ff000000000000L & l) != 0L && kind > 60)
                     kind = 60;
                  break;
               case 189:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(189, 190);
                  break;
               case 190:
                  if (curChar != 46)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(191);
                  break;
               case 191:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(191);
                  break;
               case 192:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(13, 16);
                  break;
               case 193:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(186);
                  break;
               case 194:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(193, 186);
                  break;
               case 195:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 196:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 197:
                  if ((0x3ff000000000000L & l) != 0L && kind > 59)
                     kind = 59;
                  break;
               case 200:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(20, 21);
                  break;
               case 204:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(22, 23);
                  break;
               case 213:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(214, 218);
                  break;
               case 217:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 222:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(223, 228);
                  break;
               case 227:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(28, 31);
                  break;
               case 232:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 235:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(235, 236);
                  break;
               case 238:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjstateSet[jjnewStateCnt++] = 238;
                  break;
               case 240:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(240, 241);
                  break;
               case 241:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 242:
               case 243:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAdd(243);
                  break;
               case 245:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(245, 246);
                  break;
               case 246:
                  if ((0x3ff000000000000L & l) != 0L && kind > 68)
                     kind = 68;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddStates(32, 40);
                  }
                  else if ((0xc000000178000001L & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAdd(88);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAddStates(41, 43);
                  }
                  else if (curChar == 95)
                     jjCheckNAddStates(44, 46);
                  if (curChar == 84)
                     jjAddStates(47, 48);
                  else if (curChar == 116)
                     jjAddStates(49, 50);
                  else if (curChar == 86)
                     jjAddStates(51, 52);
                  else if (curChar == 118)
                     jjAddStates(53, 54);
                  else if (curChar == 78)
                     jjAddStates(55, 56);
                  else if (curChar == 110)
                     jjAddStates(57, 58);
                  else if (curChar == 68)
                     jjAddStates(59, 60);
                  else if (curChar == 100)
                     jjAddStates(61, 62);
                  else if (curChar == 80)
                     jjAddStates(63, 64);
                  else if (curChar == 112)
                     jjAddStates(65, 66);
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 86;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 81;
                  else if (curChar == 87)
                     jjstateSet[jjnewStateCnt++] = 76;
                  else if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 71;
                  else if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 66;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 62;
                  else if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 58;
                  else if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 55;
                  else if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 52;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 49;
                  else if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 46;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 32;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 2;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 231:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(245, 246);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(67, 69);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(240, 241);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(70, 72);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(235, 236);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(73, 75);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddStates(76, 78);
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 68)
                        kind = 68;
                     jjCheckNAdd(232);
                  }
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 237;
                  break;
               case 0:
                  if (curChar == 115 && kind > 16)
                     kind = 16;
                  break;
               case 2:
                  if (curChar == 83 && kind > 16)
                     kind = 16;
                  break;
               case 3:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 108 && kind > 18)
                     kind = 18;
                  break;
               case 5:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 76 && kind > 18)
                     kind = 18;
                  break;
               case 9:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 114 && kind > 19)
                     kind = 19;
                  break;
               case 13:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 82 && kind > 19)
                     kind = 19;
                  break;
               case 17:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 110 && kind > 20)
                     kind = 20;
                  break;
               case 21:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 78 && kind > 20)
                     kind = 20;
                  break;
               case 28:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 101 && kind > 21)
                     kind = 21;
                  break;
               case 35:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 69 && kind > 21)
                     kind = 21;
                  break;
               case 42:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 116 && kind > 22)
                     kind = 22;
                  break;
               case 49:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 84 && kind > 22)
                     kind = 22;
                  break;
               case 52:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 116 && kind > 24)
                     kind = 24;
                  break;
               case 55:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 84 && kind > 24)
                     kind = 24;
                  break;
               case 58:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 112 && kind > 26)
                     kind = 26;
                  break;
               case 61:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 80 && kind > 26)
                     kind = 26;
                  break;
               case 65:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 101 && kind > 27)
                     kind = 27;
                  break;
               case 69:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 69 && kind > 27)
                     kind = 27;
                  break;
               case 74:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 87)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 101 && kind > 29)
                     kind = 29;
                  break;
               case 79:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 69 && kind > 29)
                     kind = 29;
                  break;
               case 84:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if ((0xc000000178000001L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(88);
                  break;
               case 89:
                  if (curChar == 112)
                     jjAddStates(65, 66);
                  break;
               case 90:
                  if (curChar == 109 && kind > 12)
                     kind = 12;
                  break;
               case 91:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 116 && kind > 25)
                     kind = 25;
                  break;
               case 97:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 80)
                     jjAddStates(63, 64);
                  break;
               case 99:
                  if (curChar == 77 && kind > 12)
                     kind = 12;
                  break;
               case 100:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 84 && kind > 25)
                     kind = 25;
                  break;
               case 106:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 100)
                     jjAddStates(61, 62);
                  break;
               case 108:
                  if (curChar == 101 && kind > 13)
                     kind = 13;
                  break;
               case 109:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (curChar == 111 && kind > 30)
                     kind = 30;
                  break;
               case 114:
                  if (curChar == 68)
                     jjAddStates(59, 60);
                  break;
               case 115:
                  if (curChar == 69 && kind > 13)
                     kind = 13;
                  break;
               case 116:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 79 && kind > 30)
                     kind = 30;
                  break;
               case 121:
                  if (curChar == 110)
                     jjAddStates(57, 58);
                  break;
               case 122:
                  if (curChar == 116 && kind > 14)
                     kind = 14;
                  break;
               case 123:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (curChar == 108 && kind > 17)
                     kind = 17;
                  break;
               case 125:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if (curChar == 78)
                     jjAddStates(55, 56);
                  break;
               case 131:
                  if (curChar == 84 && kind > 14)
                     kind = 14;
                  break;
               case 132:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 76 && kind > 17)
                     kind = 17;
                  break;
               case 134:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 118)
                     jjAddStates(53, 54);
                  break;
               case 140:
                  if (curChar == 101 && kind > 15)
                     kind = 15;
                  break;
               case 141:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if (curChar == 121 && kind > 31)
                     kind = 31;
                  break;
               case 148:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 86)
                     jjAddStates(51, 52);
                  break;
               case 153:
                  if (curChar == 69 && kind > 15)
                     kind = 15;
                  break;
               case 154:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if (curChar == 89 && kind > 31)
                     kind = 31;
                  break;
               case 161:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if (curChar == 116)
                     jjAddStates(49, 50);
                  break;
               case 166:
                  if (curChar == 111 && kind > 23)
                     kind = 23;
                  break;
               case 167:
                  if (curChar == 101 && kind > 28)
                     kind = 28;
                  break;
               case 168:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 84)
                     jjAddStates(47, 48);
                  break;
               case 171:
                  if (curChar == 79 && kind > 23)
                     kind = 23;
                  break;
               case 172:
                  if (curChar == 69 && kind > 28)
                     kind = 28;
                  break;
               case 173:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 176:
                  jjAddStates(79, 80);
                  break;
               case 178:
                  jjAddStates(81, 82);
                  break;
               case 179:
                  if (kind > 66)
                     kind = 66;
                  break;
               case 181:
                  jjAddStates(83, 84);
                  break;
               case 183:
                  jjAddStates(85, 86);
                  break;
               case 184:
                  if (kind > 67)
                     kind = 67;
                  break;
               case 198:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddStates(41, 43);
                  break;
               case 199:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddStates(41, 43);
                  break;
               case 201:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(200, 202);
                  break;
               case 202:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddStates(87, 90);
                  break;
               case 203:
                  if (curChar != 95)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddStates(91, 93);
                  break;
               case 205:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddStates(94, 96);
                  break;
               case 206:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(204, 207);
                  break;
               case 207:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(206, 208);
                  break;
               case 208:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddStates(97, 101);
                  break;
               case 209:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddStates(102, 107);
                  break;
               case 210:
                  if (curChar != 95)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddStates(108, 110);
                  break;
               case 211:
                  if (curChar != 95)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(199, 200);
                  break;
               case 212:
                  if (curChar == 95)
                     jjCheckNAddStates(44, 46);
                  break;
               case 214:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(213, 215);
                  break;
               case 215:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddStates(111, 115);
                  break;
               case 216:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddStates(76, 78);
                  break;
               case 218:
                  if (curChar != 95)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(213, 216);
                  break;
               case 219:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(217, 220);
                  break;
               case 220:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddStates(116, 119);
                  break;
               case 221:
                  if (curChar != 95)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddStates(120, 123);
                  break;
               case 223:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddStates(124, 126);
                  break;
               case 224:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(222, 225);
                  break;
               case 225:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddStates(127, 129);
                  break;
               case 226:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddStates(130, 135);
                  break;
               case 228:
                  if (curChar != 95)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddStates(136, 138);
                  break;
               case 229:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddStates(139, 144);
                  break;
               case 230:
                  if (curChar != 95)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(216, 217);
                  break;
               case 232:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAdd(232);
                  break;
               case 233:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddStates(32, 40);
                  break;
               case 234:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(73, 75);
                  break;
               case 235:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(235, 236);
                  break;
               case 236:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 237;
                  break;
               case 237:
                  if (curChar != 95)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAdd(238);
                  break;
               case 238:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAdd(238);
                  break;
               case 239:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(70, 72);
                  break;
               case 240:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(240, 241);
                  break;
               case 243:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjstateSet[jjnewStateCnt++] = 243;
                  break;
               case 244:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(67, 69);
                  break;
               case 245:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(245, 246);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 88:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(88);
                  break;
               case 176:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(79, 80);
                  break;
               case 178:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(81, 82);
                  break;
               case 179:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 66)
                     kind = 66;
                  break;
               case 181:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(83, 84);
                  break;
               case 183:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(85, 86);
                  break;
               case 184:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 67)
                     kind = 67;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 247 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                     kind = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa1_1(0x80L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa2_1(active0, 0x80L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(2, 7);
         break;
      default :
         return 3;
   }
   return 3;
}
static final int[] jjnextStates = {
   186, 189, 190, 192, 196, 176, 177, 178, 179, 181, 182, 183, 184, 193, 186, 194, 
   195, 193, 186, 194, 201, 211, 205, 210, 214, 218, 219, 230, 214, 218, 223, 228, 
   234, 235, 236, 239, 240, 241, 244, 245, 246, 199, 200, 203, 213, 216, 231, 171, 
   174, 166, 169, 159, 164, 146, 151, 132, 138, 123, 129, 119, 120, 112, 113, 104, 
   106, 95, 97, 244, 245, 246, 239, 240, 241, 234, 235, 236, 216, 217, 221, 176, 
   177, 178, 179, 181, 182, 183, 184, 199, 200, 202, 203, 199, 204, 207, 206, 204, 
   209, 199, 206, 200, 208, 203, 199, 206, 204, 200, 209, 203, 199, 206, 204, 213, 
   216, 217, 221, 215, 216, 217, 220, 221, 213, 216, 222, 225, 224, 227, 229, 213, 
   224, 226, 213, 216, 224, 217, 226, 221, 216, 224, 227, 216, 224, 217, 227, 229, 
   221, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\173", "\175", "\56", "\54", "\53", 
"\55", "\52", "\57", "\45", "\45\45", "\52\52", "\75\75", "\41", "\74", "\74\75", 
"\76", "\76\75", "\41\75", "\46", "\174", "\50", "\51", null, null, null, null, null, 
null, "\137", null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "multilinecomment",
   "singlelinecomment",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 0, -1, 2, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xf8fffffffffff001L, 0x0L, 
};
static final long[] jjtoSkip = {
   0xffeL, 0x1fL, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x1fL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[247];
private final int[] jjstateSet = new int[494];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 247; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 8)
       {
          jjmatchedKind = 8;
       }
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       if (jjmatchedPos == 0 && jjmatchedKind > 11)
       {
          jjmatchedKind = 11;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 6 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
           Dados.addError("COMENTARIO DE BLOCO NAO FINALIZADO", image.toString(), input_stream.getEndLine(),
               input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 7 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
               Dados.removeLastError();
         break;
      case 64 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                            Dados.addError("SIMBOLO INVALIDO", image.toString(), input_stream.getEndLine(),
     input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 65 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                       Dados.addError("NUMERO REAL INVALIDO", image.toString(), input_stream.getEndLine(),
      input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 66 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                        Dados.addError("CONSTANTE LITERAL INVALIDA", image.toString(), input_stream.getEndLine(),
                                    input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 67 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                        Dados.addError("CONSTANTE LITERAL INVALIDA", image.toString(), input_stream.getEndLine(),
                                          input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 68 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                              Dados.addError("IDENTIFICADOR INVALIDO", image.toString(), input_stream.getEndLine(),
                                                                                                      input_stream.getBeginColumn(), jjmatchedKind);
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 12 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                           Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 13 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                         Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 14 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 15 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                               Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 16 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                             Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 17 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                            Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 18 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                   Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 19 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                   Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 20 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                            Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 21 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                            Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 22 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 23 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                             Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 24 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 25 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 26 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                   Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 27 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                      Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 28 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                   Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 29 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                      Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 30 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                             Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 31 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                         Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 32 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                    Dados.addDado("CONSTANTE LITERAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 33 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                      Dados.addDado("CONSTANTE LITERAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 34 :
        image.append(jjstrLiteralImages[34]);
        lengthOfMatch = jjstrLiteralImages[34].length();
                          Dados.addDado("SIMBOLO ESPECIAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 35 :
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
                             Dados.addDado("SIMBOLO ESPECIAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
                       Dados.addDado("SIMBOLO ESPECIAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
                         Dados.addDado("SIMBOLO ESPECIAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 38 :
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
                        Dados.addDado("OPERADOR ARITMETICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 39 :
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
                         Dados.addDado("OPERADOR ARITMETICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 40 :
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
                            Dados.addDado("OPERADOR ARITMETICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 41 :
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
                           Dados.addDado("OPERADOR ARITMETICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 42 :
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
                           Dados.addDado("OPERADOR ARITMETICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 43 :
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
                        Dados.addDado("OPERADOR ARITMETICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 44 :
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
                        Dados.addDado("OPERADOR ARITMETICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 45 :
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
                           Dados.addDado("OPERADOR RELACIONAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 46 :
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
                               Dados.addDado("OPERADOR LOGICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 47 :
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
                        Dados.addDado("OPERADOR RELACIONAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
                               Dados.addDado("OPERADOR RELACIONAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 49 :
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
                           Dados.addDado("OPERADOR RELACIONAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 50 :
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
                                  Dados.addDado("OPERADOR RELACIONAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 51 :
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
                          Dados.addDado("OPERADOR RELACIONAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 52 :
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
                             Dados.addDado("OPERADOR LOGICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 53 :
        image.append(jjstrLiteralImages[53]);
        lengthOfMatch = jjstrLiteralImages[53].length();
                        Dados.addDado("OPERADOR LOGICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 54 :
        image.append(jjstrLiteralImages[54]);
        lengthOfMatch = jjstrLiteralImages[54].length();
                                    Dados.addDado("SIMBOLO ESPECIAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 55 :
        image.append(jjstrLiteralImages[55]);
        lengthOfMatch = jjstrLiteralImages[55].length();
                                     Dados.addDado("SIMBOLO ESPECIAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 59 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                          Dados.addDado("NUMERO NATURAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 60 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                  Dados.addDado("NUMERO REAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 61 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                   Dados.addDado("IDENTIFICADOR", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 62 :
        image.append(jjstrLiteralImages[62]);
        lengthOfMatch = jjstrLiteralImages[62].length();
                     Dados.addDado("IDENTIFICADOR", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 63 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
 Dados.addDado("IDENTIFICADOR", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
