/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package compilador.lexico;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PROGRAM = 12;
  /** RegularExpression Id. */
  int DEFINE = 13;
  /** RegularExpression Id. */
  int NOT = 14;
  /** RegularExpression Id. */
  int VARIABLE = 15;
  /** RegularExpression Id. */
  int IS = 16;
  /** RegularExpression Id. */
  int NATURAL = 17;
  /** RegularExpression Id. */
  int REAL = 18;
  /** RegularExpression Id. */
  int CHAR = 19;
  /** RegularExpression Id. */
  int BOOLEAN = 20;
  /** RegularExpression Id. */
  int EXECUTE = 21;
  /** RegularExpression Id. */
  int SET = 22;
  /** RegularExpression Id. */
  int TO = 23;
  /** RegularExpression Id. */
  int GET = 24;
  /** RegularExpression Id. */
  int PUT = 25;
  /** RegularExpression Id. */
  int LOOP = 26;
  /** RegularExpression Id. */
  int WHILE = 27;
  /** RegularExpression Id. */
  int TRUE = 28;
  /** RegularExpression Id. */
  int FALSE = 29;
  /** RegularExpression Id. */
  int DO = 30;
  /** RegularExpression Id. */
  int VERIFY = 31;
  /** RegularExpression Id. */
  int LITERAL_CONST_DOUBLE_QUOTES = 32;
  /** RegularExpression Id. */
  int LITERAL_CONST_SINGLE_QUOTES = 33;
  /** RegularExpression Id. */
  int OPEN_KEY = 34;
  /** RegularExpression Id. */
  int UNDER = 35;
  /** RegularExpression Id. */
  int CLOSE_KEY = 36;
  /** RegularExpression Id. */
  int DOT = 37;
  /** RegularExpression Id. */
  int COMMA = 38;
  /** RegularExpression Id. */
  int PLUS = 39;
  /** RegularExpression Id. */
  int MINUS = 40;
  /** RegularExpression Id. */
  int MULTIPLY = 41;
  /** RegularExpression Id. */
  int DIVIDER = 42;
  /** RegularExpression Id. */
  int PERCENT = 43;
  /** RegularExpression Id. */
  int MOD = 44;
  /** RegularExpression Id. */
  int POW = 45;
  /** RegularExpression Id. */
  int EQUALS = 46;
  /** RegularExpression Id. */
  int EXCLAMATION = 47;
  /** RegularExpression Id. */
  int LESS = 48;
  /** RegularExpression Id. */
  int LESS_EQUAL = 49;
  /** RegularExpression Id. */
  int GREATER = 50;
  /** RegularExpression Id. */
  int GREATER_EQUAL = 51;
  /** RegularExpression Id. */
  int DIFFERENT = 52;
  /** RegularExpression Id. */
  int AMPERSAND = 53;
  /** RegularExpression Id. */
  int PIPE = 54;
  /** RegularExpression Id. */
  int OPEN_PARENTHESIS = 55;
  /** RegularExpression Id. */
  int CLOSE_PARENTHESIS = 56;
  /** RegularExpression Id. */
  int DIGIT = 57;
  /** RegularExpression Id. */
  int NOT_DIGIT = 58;
  /** RegularExpression Id. */
  int DECIMAL_NUMBER = 59;
  /** RegularExpression Id. */
  int NATURAL_NUMBER = 60;
  /** RegularExpression Id. */
  int REAL_NUMBER = 61;
  /** RegularExpression Id. */
  int LETTER = 62;
  /** RegularExpression Id. */
  int UNDERLINE_NOT_REPEAT = 63;
  /** RegularExpression Id. */
  int DIGIT_NOT_REPEAT = 64;
  /** RegularExpression Id. */
  int FINAL = 65;
  /** RegularExpression Id. */
  int IDENTIFIER = 66;
  /** RegularExpression Id. */
  int INVALID_SYMBOLS = 67;
  /** RegularExpression Id. */
  int INVALID_NATURAL_NUMBER = 68;
  /** RegularExpression Id. */
  int INVALID_REAL_NUMBER = 69;
  /** RegularExpression Id. */
  int INVALID_LITERAL_CONST_DOUBLE = 70;
  /** RegularExpression Id. */
  int INVALID_LITERAL_CONST_SINGLE = 71;
  /** RegularExpression Id. */
  int INVALID_IDENTIFIER = 72;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int multilinecomment = 1;
  /** Lexical state. */
  int singlelinecomment = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\":--\"",
    "\"--:\"",
    "<token of kind 8>",
    "\":-\"",
    "<token of kind 10>",
    "<token of kind 11>",
    "<PROGRAM>",
    "<DEFINE>",
    "<NOT>",
    "<VARIABLE>",
    "<IS>",
    "<NATURAL>",
    "<REAL>",
    "<CHAR>",
    "<BOOLEAN>",
    "<EXECUTE>",
    "<SET>",
    "<TO>",
    "<GET>",
    "<PUT>",
    "<LOOP>",
    "<WHILE>",
    "<TRUE>",
    "<FALSE>",
    "<DO>",
    "<VERIFY>",
    "<LITERAL_CONST_DOUBLE_QUOTES>",
    "<LITERAL_CONST_SINGLE_QUOTES>",
    "\"{\"",
    "\"_\"",
    "\"}\"",
    "\".\"",
    "\",\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"%%\"",
    "\"**\"",
    "\"==\"",
    "\"!\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"!=\"",
    "\"&\"",
    "\"|\"",
    "\"(\"",
    "\")\"",
    "<DIGIT>",
    "<NOT_DIGIT>",
    "<DECIMAL_NUMBER>",
    "<NATURAL_NUMBER>",
    "<REAL_NUMBER>",
    "<LETTER>",
    "<UNDERLINE_NOT_REPEAT>",
    "<DIGIT_NOT_REPEAT>",
    "<FINAL>",
    "<IDENTIFIER>",
    "<INVALID_SYMBOLS>",
    "<INVALID_NATURAL_NUMBER>",
    "<INVALID_REAL_NUMBER>",
    "<INVALID_LITERAL_CONST_DOUBLE>",
    "<INVALID_LITERAL_CONST_SINGLE>",
    "<INVALID_IDENTIFIER>",
  };

}
