options{
    STATIC = false;
}

PARSER_BEGIN(Parser)
package compilador.lexico;

public class Parser{

    public Parser() {

    }

    public void executarAnalise() throws ParseException{
        Token token = getNextToken();

        while(token.kind != 0){
            token = getNextToken();
        }
    }
    
    public void executarAnaliseSintatica() throws ParseException{
        System.out.println("Analidor sintatico");
    	FormaPrograma();
    }
}
PARSER_END(Parser)

// INICIO SINTATICO

void FormaPrograma() : {} {
    Programa()IdentificadorOpcional()
}

void IdentificadorOpcional(): {} {
    <IDENTIFIER> | {}
}

void Programa() : {} {
    <PROGRAM><OPEN_KEY>FormaDeclaracao()CorpoPrograma()<CLOSE_KEY>
}

void CorpoPrograma(): {} {
    <EXECUTE>ListaComandos()
}

void ListaComandos(): {} {
    Comando()<DOT>ListaComandos2()
}

void ListaComandos2(): {} {
    ListaComandos() | {}
}

void Comando(): {} {
    Atribuicao() | EntradaDados() | SaidaDados() | Selecao() | Repeticao()
}

void ListaIdentificadores(): {} {
    <IDENTIFIER> ListaIdentificadores2()
}

void ListaIdentificadores2(): {} {
    <COMMA>ListaIdentificadores() | {}
}

void Atribuicao(): {} {
    <SET>Expressao()<TO>ListaIdentificadores()
}

void EntradaDados(): {} {
    <GET><OPEN_KEY>ListaIdentificadores()<CLOSE_KEY>
}

void SaidaDados(): {} {
    <PUT><OPEN_KEY>ListaIdentificadoresConst()<CLOSE_KEY>
}

void ListaIdentificadoresConst(): {} {
    <IDENTIFIER> ListaIdentificadoresConst2()| Constante() ListaIdentificadoresConst2()
}

void ListaIdentificadoresConst2(): {} {
    <COMMA> ListaIdentificadoresConst() | {}
}

void Constante(): {} {
    <NATURAL_NUMBER>
    | <REAL_NUMBER>
    | <LITERAL_CONST_SINGLE_QUOTES>
    | <LITERAL_CONST_DOUBLE_QUOTES>
}

void Selecao(): {} {
    <VERIFY>Expressao()Clausula()
}

void Clausula(): {} {
    <IS> ClausulaLinha()
}

void ClausulaLinha(): {} {
    <TRUE><OPEN_KEY>ListaComandos()<CLOSE_KEY>Clausula2() | <FALSE><OPEN_KEY>ListaComandos()<CLOSE_KEY>Clausula3()
}

void Clausula2(): {} {
    IsFalse() | {}
}

void Clausula3(): {} {
    IsTrue() | {}
}

void IsFalse(): {} {
    <IS><FALSE><OPEN_KEY>ListaComandos()<CLOSE_KEY>
}

void IsTrue(): {} {
    <IS><TRUE><OPEN_KEY>ListaComandos()<CLOSE_KEY>
}

void Repeticao(): {} {
    Loop() | While()
}

void Loop(): {} {
    <LOOP><OPEN_KEY>ListaComandos()<CLOSE_KEY><WHILE>Expressao()<IS><TRUE>
}

void While(): {} {
    <WHILE>Expressao()<IS><TRUE><DO><OPEN_KEY>ListaComandos()<CLOSE_KEY>
}

void Expressao(): {} {
    ExpressaoAritmeticaLogica()ExpressaoLinha()
}

void ExpressaoLinha(): {} {
    ExpressaoAritmeticaLogica()
    | <DIFFERENT> ExpressaoAritmeticaLogica()
    | <LESS> ExpressaoAritmeticaLogica()
    | <GREATER> ExpressaoAritmeticaLogica()
    | <LESS_EQUAL> ExpressaoAritmeticaLogica()
    | <GREATER_EQUAL> ExpressaoAritmeticaLogica()
    | {}
}

void ExpressaoAritmeticaLogica(): {} {
    Termo2() MenorPrioridade()
}

void MenorPrioridade(): {} {
    <PLUS> Termo2() MenorPrioridade()
    | <MINUS> Termo2() MenorPrioridade()
    | <PIPE> Termo2() MenorPrioridade()
    | {}
}

void Termo2(): {} {
    Termo1() MediaPrioridade()
}

void MediaPrioridade(): {} {
    <MULTIPLY> Termo1() MediaPrioridade()
    | <DIVIDER> Termo1() MediaPrioridade()
    | <PERCENT> Termo1() MediaPrioridade()
    | <MOD> Termo1() MediaPrioridade()
    | <AMPERSAND> Termo1() MediaPrioridade()
    | {}
}

void Termo1(): {} {
    Elemento() MaiorPrioridade()
}

void MaiorPrioridade(): {} {
    <POW> Elemento() MaiorPrioridade() | {}
}

void Elemento(): {} {
    <IDENTIFIER> Indice()
    | Constante()
    | <TRUE>
    | <FALSE>
    | <OPEN_PARENTHESIS> Expressao() <CLOSE_PARENTHESIS>
    | <NOT> <OPEN_PARENTHESIS> Expressao() <CLOSE_PARENTHESIS>
}

void Indice(): {} {
    <OPEN_KEY> <NATURAL_NUMBER> <CLOSE_KEY> | {}
}

// ------------------------------------------INICIO DECLARACAO-------------------------------------------------
void FormaDeclaracao(): {} {
    <DEFINE><OPEN_KEY>Declaracao()<CLOSE_KEY> | {}
}

void Tipo(): {} {
    <REAL> | <NATURAL> | <BOOLEAN> | <CHAR>
}

void Declaracao(): {} {
    DeclaracaoConst()Declaracao2()|DeclaracaoVar()Declaracao3()
}

void Declaracao2(): {} {
    DeclaracaoVar() | {}
}

void Declaracao3(): {} {
    DeclaracaoConst() | {}
}

void DeclaracaoVar(): {} {
    <VARIABLE>ListaDeclaracaoVar()
}

void ListaDeclaracaoVar(): {} {
    PrefixoDeclaracaoVar()ListaDeclaracaoVar2()
}

void PrefixoDeclaracaoVar(): {} {
    Tipo()<IS>ListaIdentificadoresVar()
}

void ListaIdentificadoresVar(): {} {
    <IDENTIFIER> ListaIdentificadoresVar3()
}

void ListaIdentificadoresVar2(): {} {
    ListaIdentificadoresVar() | {}
}

void ListaIdentificadoresVar3(): {} {
    <IDENTIFIER> ListaIdentificadoresVar4() | {}
}

void ListaIdentificadoresVar4(): {} {
    ListaIdentificadoresVar3() | <NATURAL_NUMBER> ListaIdentificadoresVar2()
}

void ListaDeclaracaoVar2(): {} {
    ListaDeclaracaoVar() | {}
}

void DeclaracaoConst(): {} {
    <NOT><VARIABLE>ListaDeclaracaoConst()
}

void ListaDeclaracaoConst(): {} {
    ListaDeclaracaoConst2() | {}
}

void ListaDeclaracaoConst2(): {} {
    PrefixoDeclaracaoConst()<DOT>ListaDeclaracaoConst()
}

void PrefixoDeclaracaoConst(): {} {
    Tipo() <IS> ListaIdentificadores()
}

// ------------------------------------------FIM DECLARACAO-------------------------------------------------



// INICIO LEXICO
//ignorar
SKIP : {
    " "
	| "\t"
    | "\n"
    | "\r"
    | "\f"
}

SKIP : {
    ":--" {Dados.addError("COMENTARIO DE BLOCO NAO FINALIZADO", image.toString(), input_stream.getEndLine(),
               input_stream.getBeginColumn(), jjmatchedKind);}: multilinecomment
}

<multilinecomment> SKIP : {
	"--:" {Dados.removeLastError();}: DEFAULT
	| <~[]>
}

SKIP : {
    ":-": singlelinecomment
}

<singlelinecomment> SKIP : {
	<["\n", "\r"]> : DEFAULT
	| <~[]>
}

//palavras reservadas
TOKEN : {
	 < PROGRAM: ("program"|"PROGRAM")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < DEFINE: ("define"|"DEFINE")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < NOT: ("not"|"NOT")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < VARIABLE: ("variable"|"VARIABLE")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < IS: ("is"|"IS")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < NATURAL: ("natural"|"NATURAL")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < REAL: ("real"|"REAL")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < CHAR: ("char"|"CHAR")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < BOOLEAN: ("boolean"|"BOOLEAN")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < EXECUTE: ("execute"|"EXECUTE")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < SET: ("set"|"SET")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < TO: ("to"|"TO")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < GET: ("get"|"GET")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < PUT: ("put"|"PUT")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < LOOP: ("loop"|"LOOP")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < WHILE: ("while"|"WHILE")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < TRUE: ("true"|"TRUE")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < FALSE: ("false"|"FALSE")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < DO: ("do"|"DO")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < VERIFY: ("verify"|"VERIFY")>{Dados.addDado("PALAVRA RESERVADA", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
}

//constante literal
TOKEN: {
   <LITERAL_CONST_DOUBLE_QUOTES: "\"" (~[ "\"", "\n", "\r"])* "\"">{Dados.addDado("CONSTANTE LITERAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
   | <LITERAL_CONST_SINGLE_QUOTES: "\'" (~[ "\"", "\n", "\r"])* "\'">{Dados.addDado("CONSTANTE LITERAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}

}

//caracteres especiais
TOKEN : {
	< OPEN_KEY: "{" >{Dados.addDado("SIMBOLO ESPECIAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	//| < UNDER: "_"> {Dados.addDado("SIMBOLO ESPECIAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < CLOSE_KEY: "}" >{Dados.addDado("SIMBOLO ESPECIAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < DOT: "." >{Dados.addDado("SIMBOLO ESPECIAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < COMMA: "," >{Dados.addDado("SIMBOLO ESPECIAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < PLUS: "+" >{Dados.addDado("OPERADOR ARITMETICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < MINUS: "-" >{Dados.addDado("OPERADOR ARITMETICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < MULTIPLY: "*" >{Dados.addDado("OPERADOR ARITMETICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < DIVIDER: "/" >{Dados.addDado("OPERADOR ARITMETICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < PERCENT: "%" >{Dados.addDado("OPERADOR ARITMETICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < MOD: "%%" >{Dados.addDado("OPERADOR ARITMETICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < POW: "**" >{Dados.addDado("OPERADOR ARITMETICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < EQUALS: "==" >{Dados.addDado("OPERADOR RELACIONAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < EXCLAMATION: "!" >{Dados.addDado("OPERADOR LOGICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < LESS: "<" >{Dados.addDado("OPERADOR RELACIONAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < LESS_EQUAL: "<=" >{Dados.addDado("OPERADOR RELACIONAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < GREATER: ">" >{Dados.addDado("OPERADOR RELACIONAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < GREATER_EQUAL: ">=" >{Dados.addDado("OPERADOR RELACIONAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
    | < DIFFERENT: "!=" >{Dados.addDado("OPERADOR RELACIONAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < AMPERSAND: "&" >{Dados.addDado("OPERADOR LOGICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < PIPE: "|" >{Dados.addDado("OPERADOR LOGICO", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < OPEN_PARENTHESIS: "(" >{Dados.addDado("SIMBOLO ESPECIAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < CLOSE_PARENTHESIS: ")" >{Dados.addDado("SIMBOLO ESPECIAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
}

// numbers
TOKEN : {
	< #DIGIT: ["0"-"9"] >
	| < #NOT_DIGIT: (~["0"-"9"])+ >
	| < #DECIMAL_NUMBER: <DOT><DIGIT>(<DIGIT>)?>
	| < NATURAL_NUMBER: <DIGIT>(<DIGIT>)?(<DIGIT>)? >{Dados.addDado("NUMERO NATURAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
	| < REAL_NUMBER: <DIGIT>((<DIGIT>)?){4}<DECIMAL_NUMBER> >{Dados.addDado("NUMERO REAL", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
}

// identificador
TOKEN : {
     < LETTER:["A"-"Z", "a"-"z"]> {Dados.addDado("IDENTIFICADOR", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
    | < UNDER: "_"> {Dados.addDado("IDENTIFICADOR", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
    |< IDENTIFIER:
((<LETTER>)+((<UNDER>|(<DIGIT>((<LETTER>)+|<UNDER>))+) | (<UNDER>((<DIGIT>((<LETTER>)+|<UNDER>))+|(<LETTER>)+))+)?)+ 
    | (<UNDER>((<DIGIT>((<LETTER>)+|<UNDER>))+|  ((<LETTER>)+((<UNDER>|(<DIGIT>((<LETTER>)+|<UNDER>))+) | (<UNDER>((<DIGIT>((<LETTER>)+|<UNDER>))+|(<LETTER>)+))+)?)+)+) 
    |<UNDER>
    |<LETTER>
    > 
{Dados.addDado("IDENTIFICADOR", image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}
}

// erros
SPECIAL_TOKEN : {
    <INVALID_SYMBOLS: (~["a"-"z", "A"-"Z", "0"-"9", "\"", "(", ")", "{", "}", ",", ".", "=", ">", "<", "!",
    "+", "-", "_", "*", "&", "/", "%", "|", "\n", "\r", "\f", "\t", " "])+>{Dados.addError("SIMBOLO INVALIDO", image.toString(), input_stream.getEndLine(),
     input_stream.getBeginColumn(), jjmatchedKind);}
    | <INVALID_NATURAL_NUMBER: <DIGIT>(<DIGIT>)?(<DIGIT>)?<NOT_DIGIT>>{Dados.addError("NUMERO NATURAL INVALIDO", image.toString(), input_stream.getEndLine(),
       input_stream.getBeginColumn(), jjmatchedKind);}
    | <INVALID_REAL_NUMBER: (<DIGIT>)+<DOT>(<DIGIT>)*>{Dados.addError("NUMERO REAL INVALIDO", image.toString(), input_stream.getEndLine(),
      input_stream.getBeginColumn(), jjmatchedKind);}
    | <INVALID_LITERAL_CONST_DOUBLE: "\"" (~["\n","\r","\""])* ~["\""]>{Dados.addError("CONSTANTE LITERAL INVALIDA", image.toString(), input_stream.getEndLine(),
                                    input_stream.getBeginColumn(), jjmatchedKind);}

    | <INVALID_LITERAL_CONST_SINGLE: "\'" (~["\n","\r","\""])* ~["\'"]>{Dados.addError("CONSTANTE LITERAL INVALIDA", image.toString(), input_stream.getEndLine(),
                                          input_stream.getBeginColumn(), jjmatchedKind);}
    | <INVALID_IDENTIFIER: <DIGIT>(<LETTER>|<DIGIT>|<UNDER>)+
    | (<LETTER>|<DIGIT>|<UNDER>)*(<UNDER>){2}(<LETTER>|<DIGIT>|<UNDER>)*
    | (<LETTER>|<DIGIT>|<UNDER>)*(<DIGIT>){2}(<LETTER>|<DIGIT>|<UNDER>)*
    | (<LETTER>|<DIGIT>|<UNDER>)+<DIGIT>> {Dados.addError("IDENTIFICADOR INVALIDO", image.toString(), input_stream.getEndLine(),
                                                                                                      input_stream.getBeginColumn(), jjmatchedKind);}
}