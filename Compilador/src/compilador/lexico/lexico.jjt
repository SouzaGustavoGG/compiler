options{
    STATIC = false;
}

PARSER_BEGIN(Parser)
package compilador.lexico;

public class Parser{

    public Parser() {

    }

    public static void main(String[] args) throws ParseException {
       Parser parser;
       if(args.length == 0){
           System.out.println("Reading from standard input!");
           parser = new Parser(System.in);
       } else if(args.length == 1){
           try{
                parser = new Parser(new java.io.FileInputStream(args[0]));
           } catch(java.io.FileNotFoundException e){
                System.err.println(args[0] + " was not found." );
                System.err.println(e);
                return;
           }
       } else{
            System.out.println("Use:\njava Parser < inputFile");
            System.out.println("or java Parser inputFile");
            return;
        }

        try {
            parser.Program();
            System.out.println("Compilado com sucesso.");
        } catch (ParseException e) {
            System.out.println(e.getMessage());
            System.out.println("Foram encontrados erros.");
        }
    }
}
PARSER_END(Parser)

TOKEN_MGR_DECLS : {
    int countLexError = 0;

    public int foundLexError() {
        return countLexError;
    }
}

JAVACODE void Program() {
    Token token = getNextToken();

    while(token.kind != 0){
        token = getNextToken();
    }
 }

//ignorar
SKIP : {
    " "
	| "\t"
    | "\n"
    | "\r"
    | "\f"
}

SKIP : {
    ":--": multilinecomment
}

SKIP : {
    ":-": singlelinecomment
}

<multilinecomment> SKIP : {
	"--:": DEFAULT
	| <~[]>
}

<singlelinecomment> SKIP : {
	<["\n", "\r"]> : DEFAULT
	| <~[]>
}

//palavras reservadas
TOKEN : {
	 < PROGRAM: "program">{System.out.println("PALAVRA RESERVADA -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < DEFINE: "define">{System.out.println("PALAVRA RESERVADA -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < NOT: "not">{System.out.println("PALAVRA RESERVADA -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < VARIABLE: "variable">{System.out.println("PALAVRA RESERVADA -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < IS: "is">{System.out.println("PALAVRA RESERVADA -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < NATURAL: "natural">{System.out.println("PALAVRA RESERVADA -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < REAL: "real">{System.out.println("PALAVRA RESERVADA -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < CHAR: "char">{System.out.println("PALAVRA RESERVADA -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < BOOLEAN: "boolean">{System.out.println("PALAVRA RESERVADA -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < EXECUTE: "execute">{System.out.println("PALAVRA RESERVADA -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < SET: "set">{System.out.println("PALAVRA RESERVADA -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < TO: "to">{System.out.println("PALAVRA RESERVADA -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < GET: "get">{System.out.println("PALAVRA RESERVADA -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < PUT: "put">{System.out.println("PALAVRA RESERVADA -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < LOOP: "loop">{System.out.println("PALAVRA RESERVADA -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < WHILE: "while">{System.out.println("PALAVRA RESERVADA -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < TRUE: "true">{System.out.println("PALAVRA RESERVADA -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < FALSE: "false">{System.out.println("PALAVRA RESERVADA -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < DO: "do">{System.out.println("PALAVRA RESERVADA -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
}

//constante literal
TOKEN: {
   <LITERAL_CONST: "\"" (~[ "\"", "\n", "\r"])* "\"">{System.out.println("CONSTANTE LITERAL -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
}

//caracteres especiais
TOKEN : {
	< OPEN_KEY: "{" >{System.out.println("CARACTER ESPECIAL -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < CLOSE_KEY: "}" >{System.out.println("CARACTER ESPECIAL -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < DOT: "." >{System.out.println("CARACTER ESPECIAL -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < COMMA: "," >{System.out.println("CARACTER ESPECIAL -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < PLUS: "+" >{System.out.println("CARACTER ESPECIAL -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < MINUS: "-" >{System.out.println("CARACTER ESPECIAL -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < MULTIPLY: "*" >{System.out.println("CARACTER ESPECIAL -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < DIVIDER: "/" >{System.out.println("CARACTER ESPECIAL -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < PERCENT: "%" >{System.out.println("CARACTER ESPECIAL -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < MOD: "%%" >{System.out.println("CARACTER ESPECIAL -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < POW: "**" >{System.out.println("CARACTER ESPECIAL -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < EQUALS: "==" >{System.out.println("CARACTER ESPECIAL -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < EXCLAMATION: "!" >{System.out.println("CARACTER ESPECIAL -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < LESS: "<" >{System.out.println("CARACTER ESPECIAL -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < LESS_EQUAL: "<=" >{System.out.println("CARACTER ESPECIAL -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < GREATER: ">" >{System.out.println("CARACTER ESPECIAL -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < GREATER_EQUAL: ">=" >{System.out.println("CARACTER ESPECIAL -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
    | < DIFFERENT: "!=" >{System.out.println("CARACTER ESPECIAL -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < AMPERSAND: "&" >{System.out.println("CARACTER ESPECIAL -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < PIPE: "|" >{System.out.println("CARACTER ESPECIAL -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < OPEN_PARENTHESIS: "(" >{System.out.println("CARACTER ESPECIAL -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < CLOSE_PARENTHESIS: ")" >{System.out.println("CARACTER ESPECIAL -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
}

// numbers
TOKEN : {
	< #DIGIT: ["0"-"9"] >
	| < DECIMAL_CONST: <DOT><DIGIT>(<DIGIT>)? >{System.out.println("CONSTANTE DECIMAL -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < INTEGER_CONST: <DIGIT>(<DIGIT>)?(<DIGIT>)? >{System.out.println("CONSTANTE INTEIRA -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
	| < REAL_CONST: <DIGIT>((<DIGIT>)?){4}<DECIMAL_CONST> >{System.out.println("CONSTANTE REAL -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
}

// identificadores
TOKEN :{
	<IDENTIFICATOR: <UPL>(<SP>)?((<LETTER>(<SP>)?)|(<DIGIT>(<DIGIT>)?(<LETTER>|<SP>)))* > {System.out.println("IDENTIFICADOR -> " + image + " na linha "+input_stream.getEndLine()+", coluna "+input_stream.getBeginColumn()+ "| ID: "+jjmatchedKind);}
    | <#SP: "_">
    | <#LETTER:["A"-"Z", "a"-"z"]>
    | <#UPL: ["A"-"Z"]>
}